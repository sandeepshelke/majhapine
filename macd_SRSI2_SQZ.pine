// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© skjultfyr

//@version=4
study("RSI MACD SRSI SQZ")
// Getting inputs
fast_length = input(title="Fast Length", type=input.integer, defval=12)
slow_length = input(title="Slow Length", type=input.integer, defval=26)
src = input(title="Source", type=input.source, defval=close)
signal_length = input(title="Signal Smoothing", type=input.integer, minval = 1, maxval = 50, defval = 9)
sma_source = input(title="Simple MA (Oscillator)", type=input.bool, defval=false)
sma_signal = input(title="Simple MA (Signal Line)", type=input.bool, defval=false)
// Plot colors
col_grow_above = #26A69A
col_grow_below = #FFCDD2
col_fall_above = #B2DFDB
col_fall_below = #EF5350
col_macd = color.blue
col_signal = color.orange
// Calculating
fast_ma = sma_source ? sma(src, fast_length) : ema(src, fast_length)
slow_ma = sma_source ? sma(src, slow_length) : ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal ? sma(macd, signal_length) : ema(macd, signal_length)
hist = macd - signal
plot(hist, title="Histogram", style=plot.style_columns, color=color.new(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below), 0))
plot(macd, title="MACD", color=color.new(col_macd, 0))
plot(signal, title="Signal", color=color.new(col_signal, 0))

smoothK = input(3, "K", minval=1)
smoothD = input(3, "D", minval=1)
length = input(14, "RSI Length", minval=1)
lengthStoch = input(14, "Stochastic Length", minval=1)
// src = input(close, title="RSI Source")
srsi = rsi(src, length)
k = sma(stoch(srsi, srsi, srsi, lengthStoch), smoothK)
d = sma(k, smoothD)
plot(k, "K", color=color.red)
plot(d, "D", color=color.green)

// length = input(14, minval=1, title="Length")
// src = input(close, "Source", type = input.source)
up = rma(max(change(src), 0), length)
down = rma(-min(change(src), 0), length)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
plot(rsi, "RSI", color=color.yellow)
band1 = hline(70, "Upper Band", color=#C0C0C0)
bandm = hline(50, "Middle Band", color=color.new(#C0C0C0, 50))
band0 = hline(20, "Lower Band", color=#C0C0C0)
fill(band1, band0, color=color.new(#9915FF, 90), title="Background")

//// squeeze momemntum
lengthBB = input(20, title="BB Length")
mult = input(2.0,title="BB MultFactor")
lengthKC=input(20, title="KC Length")
multKC = input(1.5, title="KC MultFactor")

useTrueRange = input(true, title="Use TrueRange (KC)", type=input.bool)

// Calculate BB
source = close
basis = sma(source, lengthBB)
dev = multKC * stdev(source, lengthBB)
upperBB = basis + dev
lowerBB = basis - dev

// Calculate KC
ma = sma(source, lengthKC)
range = useTrueRange ? tr : (high - low)
rangema = sma(range, lengthKC)
upperKC = ma + rangema * multKC
lowerKC = ma - rangema * multKC

sqzOn  = (lowerBB > lowerKC) and (upperBB < upperKC)
sqzOff = (lowerBB < lowerKC) and (upperBB > upperKC)
noSqz  = (sqzOn == false) and (sqzOff == false)

val = linreg(source  -  avg(avg(highest(high, lengthKC), lowest(low, lengthKC)),sma(close,lengthKC)), lengthKC,0)
darkblue = #150bf4
lightblue = #1ff6fe
darkgreen = #12891b
lightgreen = #36ff00
darkred = #4b0101
lightred = #fe0a0a

bcolor = iff( val > 0, iff( val > nz(val[1]), lightgreen, darkgreen), iff( val < nz(val[1]), lightred, darkred))
scolor = noSqz ? lightblue : sqzOn ? darkblue : lightblue
plot(val, "squeeze", color=bcolor, style=plot.style_histogram, linewidth=6)
plot(0, "trend change", color=scolor, style=plot.style_circles, linewidth=4)

